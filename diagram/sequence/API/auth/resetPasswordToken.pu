@startuml


skinparam style strictuml

skinparam lifelineStrategy solid

skinparam ParticipantPadding 70

skinparam BoxPadding 10


autonumber

actor User as User


participant main as main



box "route" #lightBlue

participant AuthRoute as AuthRoute

end box


box "controller" #LightGoldenRodYellow
participant AuthController as AuthController

end box


box "model" #lightBlue
participant UserModel as UserModel
participant ResetTokenModel as ResetTokenModel

end box


User -> main: Request to send reset password token
activate User
activate main

main -> AuthRoute: POST api/reset-password
activate AuthRoute

note right of main #Aqua
* Request param:
Content type: application/json
Request content:
- email: String
end note

AuthRoute -> AuthController: resetPasswordToken(req, res)
note right of AuthRoute #Aqua
* Request param:
{ email } = req.body
end note
activate AuthController

AuthController -> UserModel: findOne(param)
note right of AuthController #Aqua
  * Request param:
  email: String
end note

activate UserModel

UserModel --> AuthController: return user
deactivate UserModel
alt user existed
  AuthController -> AuthController: create reset token
  AuthController -> AuthController: create reset token expiration

  AuthController -> ResetTokenModel: create()
  note right of UserModel #Aqua
    * Request param:
     - user_id: user.user_id
     - token: resetToken
     - expiration: resetTokenExpiration
  end note

  activate ResetTokenModel
  ResetTokenModel --> AuthController: return
  deactivate ResetTokenModel

  AuthController -> AuthController: send reset token to user's email

  AuthController -> AuthRoute: return response
else user does not exist
AuthController -> AuthRoute: return response error
deactivate AuthController
end

AuthRoute --> main: return response
deactivate AuthRoute

main --> User: return response
deactivate main
deactivate User

@enduml
