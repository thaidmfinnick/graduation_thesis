'

@startuml


skinparam style strictuml

skinparam lifelineStrategy solid

skinparam ParticipantPadding 70

skinparam BoxPadding 10

autonumber

actor User as User


participant main as main


box "route" #lightBlue

participant UserRoute as UserRoute

end box


box "controller" #LightGoldenRodYellow
participant UserController as UserController

end box


box "model" #lightBlue
participant UserModel as UserModel

end box


User -> main: Request to change password
activate User
activate main

main -> UserRoute: PUT api/users/change-password
activate UserRoute

note right of main #Aqua
* Request param:
Content type: application/json
Request content:
  - currentPassword: String
  - newPassword: String
  - confirmPassword: String

end note

UserRoute -> UserController: changePassword(req, res)
activate UserController

note right of UserRoute #Aqua
* Request param:
{ currentPassword, newPassword,
 confirmPassword } = req.body
token = req.cookies.jwt
end note

UserController -> UserController: Decode token

UserController -> UserModel: findByPk(decodeToken.user_id)

activate  UserModel

UserModel --> UserController: return user

deactivate UserModel

opt user does not exist
  UserController --> UserRoute: return response error
end

opt req.currentPassword !== user.password
  UserController --> UserRoute: return response error
end

opt req.newPassword !== req.confirmPassword
  UserController --> UserRoute: return response error
end

UserController -> UserController: Hash newPassword

UserController -> UserModel: save()
activate UserModel
note right of UserController #Aqua
  * Request param: 
    - user.password = newsPassword
end note

UserModel --> UserController: return
deactivate UserModel
UserController --> UserRoute: return response

deactivate UserController

UserRoute --> main: return response

deactivate UserRoute

main --> User: return response

deactivate main
deactivate User




@enduml

